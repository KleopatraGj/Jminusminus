// Copyright 2012- Bill Campbell, Swami Iyer and Bahar Akbal-Delibas.
//
// Syntactic grammar for j--, suitable for parsing by recursive descent.

compilationUnit ::= [ PACKAGE qualifiedIdentifier SEMI ]
                    { IMPORT  qualifiedIdentifier SEMI }
                    { typeDeclaration }
                    EOF

qualifiedIdentifier ::= IDENTIFIER { DOT IDENTIFIER }

typeDeclaration ::= modifiers ( classDeclaration | interfaceDeclaration )

modifiers ::= { ABSTRACT | PRIVATE | PROTECTED | PUBLIC | STATIC }

classDeclaration ::= CLASS IDENTIFIER [ EXTENDS qualifiedIdentifier ]
                                [IMPLEMENTS qualifiedIdentifier { COMMA qualifiedIdentifier } ] classBody

interfaceDeclaration ::= INTERFACE IDENTIFIER
                            [EXTENDS qualifiedIdentifier { COMMA qualifiedIdentifier } ] interfaceBody

classBody ::= LCURLY { modifiers memberDecl } RCURLY
interfaceBody ::= LCURLY { modifiers interfaceMemberDecl } RCURLY

memberDecl ::= IDENTIFIER formalParameters [ THROWS qualifiedIdentifier { COMMA qualifiedIdentifier } ] block
             | ( VOID | type ) IDENTIFIER formalParameters
                    [ THROWS qualifiedIdentifier { COMMA qualifiedIdentifier } ] ( block | SEMI )
             | type variableDeclarators SEMI

interfaceMemberDecl ::= ( VOID | type ) IDENTIFIER formalParameters
                            [ THROWS qualifiedIdentifier { COMMA qualifiedIdentifier } ] SEMI
                      | type variableDeclarators SEMI

block ::= LCURLY { blockStatement } RCURLY

blockStatement ::= localVariableDeclarationStatement
                 | statement

statement ::= block
            | BREAK SEMI
            | CONTINUE SEMI
            | DO statement WHILE parExpression SEMI
            | FOR LPAREN [forInit] SEMI [ expression ] SEMI [forUpdate ] RPAREN statement
            | IF parExpression statement [ ELSE statement ]
            | RETURN [ expression ] SEMI
            | SEMI
            | SWITCH parExpression LCURLY { switchBlockStatementGroup } RCULRY
            | THROW expression SEMI
            | TRY block { CATCH LPAREN formalParameter RPAREN block } [ FINALLY block ]
            | WHILE parExpression statement
            | statementExpression SEMI

formalParameters ::= LPAREN [ formalParameter { COMMA formalParameter } ] RPAREN

formalParameter ::= type IDENTIFIER

parExpression ::= LPAREN expression RPAREN

forInt ::= statementExpression { COMMA statementExpression }
         | type variableDeclarators

forUpdate ::= statementExpression { COMMA statementExpression }

switchBlockStatementGroup ::= switchLabel { switchLabel } { blockStatement }

switchLabel ::= CASE expression COLON
             | DEFAULT COLON

localVariableDeclarationStatement ::= type variableDeclarators SEMI

variableDeclarators ::= variableDeclarator { COMMA variableDeclarator }

variableDeclarator ::= IDENTIFIER [ ASSIGN variableInitializer ]
                    
variableInitializer ::= arrayInitializer | expression

arrayInitializer ::= LCURLY [ variableInitializer { COMMA variableInitializer } [ COMMA ] ] RCURLY

arguments ::= LPAREN [ expression { COMMA expression } ] RPAREN

type ::= referenceType | basicType

basicType ::= BOOLEAN | CHAR | DOUBLE | INT | LONG

referenceType ::= basicType LBRACK RBRACK { LBRACK RBRACK }
                | qualifiedIdentifier { LBRACK RBRACK }

statementExpression ::= expression

expression ::= assignmentExpression

assignmentExpression ::= conditionalAndExpression
                                [ ( ALSHIFT_ASSIGN | BAND_ASSIGN | ARSHIFT_ASSIGN | ASSIGN | DIV_ASSIGN
                                | LRSHIFT_ASSIGN | MINUS_ASSIGN | BOR_ASSIGN | PLUS_ASSIGN | REM _ASSIGN
                                | STAR_ASSIGN | BXOR_ASSIGN) assignmentExpression ]

conditionalExpression ::= conditionalOrExpression [ QUESTION expression COLON conditionalExpression ]

conditionalOrExpression ::= condisiotnalAndExpression { LOR conditionalAndExpression }

conditionalAndExpression ::= inclusiveOrExpression {  LAND inclusiveOrExpression }

inclusiveOrExpression ::= exclusiveOrExpression { BOR exclusiveOrExpression }

exclusiveOrExpression ::= andExpression { BXOR andExpression }

andExpression ::= equalityExpression { BAND equalityExpression }

equalityExpression ::= relationalExpression { ( EQUAL | NOT_EQUAL ) relationalExpression }

relationalExpression ::= shiftExpression [ ( GE | GT | LE | LT ) shiftExpression
                                            | INSTANCEOF referenceType ]

shiftExpression ::= additiveExpression { ( ALSHIFT | ARSHIFT | LRSHIFT ) additiveExpression }

additiveExpression ::= multiplicativeExpression { ( MINUS | PLUS ) multiplicativeExpression }

multiplicativeExpression ::= unaryExpression { ( STAR | DIV | REM ) unaryExpression }


unaryExpression ::= INC unaryExpression
                  | ( MINUS | PLUS ) unaryExpression
                  | simpleUnaryExpression


simpleUnaryExpression ::= LNOT unaryExpression
                        | BNOT unaryExpression // from appendix C in the book
                        | LPAREN basicType RPAREN unaryExpression
                        | LPAREN referenceType RPAREN simpleUnaryExpression
                        | postfixExpression


postfixExpression ::= primary { selector } { DEC }

selector ::= DOT qualifiedIdentifier [ arguments ]
           | LBRACK expression RBRACK

primary ::= parExpression
          | NEW creator
          | THIS [ arguments ]
          | SUPER ( arguments | DOT IDENTIFIER [ arguments ] )
          | qualifiedIdentifier [ arguments ]
          | literal

creator ::= ( basicType | qualifiedIdentifier )
                ( arguments
                | LBRACK RBRACK { LBRACK RBRACK } [ arrayInitializer ]
                | newArrayDeclarator
                )

newArrayDeclarator ::= LBRACK expression RBRACK { LBRACK expression RBRACK } { LBRACK RBRACK }

literal ::= CHAR_LITERAL | DOUBLE_LITERAL | FALSE | INT_LITERAL | LONG_LITERAL | NULL | STRING_LITERAL | TRUE
