/* JavaCCParser.java */
/* Generated By:JavaCC: Do not edit this line. JavaCCParser.java */
package jminusminus;

import java.util.ArrayList;

/**
 * Parser generated by JavaCC. It parses a j-- compilation unit (program file), taking tokens from
 * the scanner (also generated by JavaCC), and produces an abstract syntax tree (AST) for it.
 */
class JavaCCParser implements JavaCCParserConstants {
    // Whether a parser error has been found.
    private boolean errorHasOccurred;

    // Name of the file that is parsed.
    private String fileName;

    /**
     * Sets the name of the file being parsed.
     *
     * @param fileName name of the file being parsed.
     */
    public void fileName(String fileName) {
        this.fileName = fileName;
    }

    /**
     * Returns {@code true} if a parser error has occurred up to now, and {@code false} otherwise.
     *
     * @return {@code true} if a parser error has occurred up to now, and {@code false} otherwise.
     */
    public boolean errorHasOccurred() {
        return errorHasOccurred;
    }

    // Pulls out and returns the ambiguous part of a name.
    private AmbiguousName ambiguousPart(TypeName name) {
        String qualifiedName = name.toString();
        int i = qualifiedName.lastIndexOf('.');
        return i == -1 ? null : new AmbiguousName(name.line(), qualifiedName.substring(0, i));
    }

    // Reports a syntax error.
    private void reportParserError(String message, Object... args) {
        errorHasOccurred = true;
        System.err.printf("%s:%d: error: ", fileName, token.beginLine);
        System.err.printf(message, args);
        System.err.println();
    }

    // Recover from the parser error that occurred by skipping to any of the specified tokens.
    // Current error recovery mechanism is rather simple-minded and is based on skipping all the
    // tokens until a SEMI or an EOF is encountered. This scheme can be enhanced by passing in the
    // FOLLOW-SET of the non-terminal at hand.
    private void recoverFromError(int[] skipTo, ParseException e) {
        // Get the possible expected tokens.
        StringBuffer expected = new StringBuffer();
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                expected.append("\n");
                expected.append("    ");
                expected.append(tokenImage[e.expectedTokenSequences[i][j]]);
                expected.append("...");
            }
        }

        // Print error message.
        if (e.expectedTokenSequences.length == 1) {
            reportParserError("\"%s\" found where %s sought", getToken(1), expected);
        } else {
            reportParserError("\"%s\" found where one of %s sought", getToken(1), expected);
        }

        // Recover.
        boolean loop = true;
        do {
            token = getNextToken();
            for (int i = 0; i < skipTo.length; i++) {
                if (token.kind == skipTo[i]) {
                    loop = false;
                    break;
                }
            }
        } while(loop);
    }

  final public JCompilationUnit compilationUnit() throws ParseException {int line = 0;
    TypeName packageName = null;
    TypeName anImport = null;
    ArrayList<TypeName> imports = new ArrayList<TypeName>();
    JAST aTypeDeclaration = null;
    ArrayList<JAST> typeDeclarations = new ArrayList<JAST>();
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
line = token.beginLine;
        packageName = qualifiedIdentifier();
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
line = line == 0 ? token.beginLine : line;
        anImport = qualifiedIdentifier();
imports.add(anImport);
        jj_consume_token(SEMI);
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case INTERFACE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        aTypeDeclaration = typeDeclaration();
line = line == 0 ? aTypeDeclaration.line() : line;
                typeDeclarations.add(aTypeDeclaration);
      }
      jj_consume_token(0);
line = line == 0 ? token.beginLine : line;
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JCompilationUnit(fileName, line, packageName, imports, typeDeclarations);}
    throw new Error("Missing return statement in function");
}

  final private TypeName qualifiedIdentifier() throws ParseException {int line = 0;
    String qualifiedIdentifier = "";
    try {
      jj_consume_token(IDENTIFIER);
line = token.beginLine;
            qualifiedIdentifier = token.image;
      label_3:
      while (true) {
        if (jj_2_1(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
qualifiedIdentifier += "." + token.image;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new TypeName(line, qualifiedIdentifier);}
    throw new Error("Missing return statement in function");
}

  final private JAST typeDeclaration() throws ParseException {ArrayList<String> mods = null;
    // changed the name classDeclaration to typeDeclaration
    JAST typeDeclaration = null;
    // I initially had JAST classDeclaration = null; and
    //JAST interfaceDeclaration = null; but that is not necessary

    try {
      if (jj_2_2(2147483647)) {
        mods = modifiers();
        typeDeclaration = classDeclaration(mods);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case INTERFACE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:{
          mods = modifiers();
          typeDeclaration = interfaceDeclaration(mods);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return typeDeclaration;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<String> modifiers() throws ParseException {ArrayList<String> mods = new ArrayList<String>();
    boolean scannedPUBLIC    = false;
    boolean scannedPROTECTED = false;
    boolean scannedPRIVATE   = false;
    boolean scannedSTATIC    = false;
    boolean scannedABSTRACT  = false;
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:{
          jj_consume_token(ABSTRACT);
mods.add("abstract");
                if (scannedABSTRACT) {
                    reportParserError("Repeated modifier: abstract");
                }
                scannedABSTRACT = true;
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
mods.add("private");
                if (scannedPRIVATE) {
                    reportParserError("Repeated modifier: private");
                }
                if (scannedPUBLIC || scannedPROTECTED) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPRIVATE = true;
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
mods.add("protected");
                if (scannedPROTECTED) {
                    reportParserError("Repeated modifier: protected");
                }
                if (scannedPUBLIC || scannedPRIVATE) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPROTECTED = true;
          break;
          }
        case PUBLIC:{
          jj_consume_token(PUBLIC);
mods.add("public");
                if (scannedPUBLIC) {
                    reportParserError("Repeated modifier: public");
                }
                if (scannedPROTECTED || scannedPRIVATE) {
                    reportParserError("Access conflict in modifiers");
                }
                scannedPUBLIC = true;
          break;
          }
        case STATIC:{
          jj_consume_token(STATIC);
mods.add("static");
                if (scannedSTATIC) {
                    reportParserError("Repeated modifier: static");
                }
                scannedSTATIC = true;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return mods;}
    throw new Error("Missing return statement in function");
}

  final private JClassDeclaration classDeclaration(ArrayList<String> mods) throws ParseException {int line = 0;
    String name = "";
    Type superClass = Type.OBJECT;
    ArrayList<JMember> classBody = null;
    // I added the following variables, a list and a superInt of type
    // TypeName for the optional IMPLEMENTS
    ArrayList<TypeName> superInterfaces = new ArrayList<TypeName>();
    TypeName superInt;
    try {
      jj_consume_token(CLASS);
line = token.beginLine;
      jj_consume_token(IDENTIFIER);
name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        superClass = qualifiedIdentifier();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLEMENTS:{
        jj_consume_token(IMPLEMENTS);
        superInt = qualifiedIdentifier();
superInterfaces.add(superInt);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          superInt = qualifiedIdentifier();
superInterfaces.add(superInt);
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      classBody = classBody();
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
if (superInterfaces.isEmpty()) {
            {if ("" != null) return new JClassDeclaration(line, mods, name, superClass, null, classBody);}
      }
      {if ("" != null) return new JClassDeclaration(line, mods, name, superClass, superInterfaces, classBody);}
    throw new Error("Missing return statement in function");
}

  final private JInterfaceDeclaration interfaceDeclaration(ArrayList<String> mods) throws ParseException {int line = 0;
    String name = "";
    // initialize to null according to professor's instructions in office hours
    ArrayList<TypeName> superInterfaces = null;
    ArrayList<JMember> interfaceb = null;
    TypeName superInt = null;
    try {
      jj_consume_token(INTERFACE);
line = token.beginLine;
      jj_consume_token(IDENTIFIER);
name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        superInt = qualifiedIdentifier();
// create the ArrayList here rather than on the first block
             superInterfaces = new ArrayList<TypeName>();
             superInterfaces.add(superInt);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_6;
          }
          jj_consume_token(COMMA);
          superInt = qualifiedIdentifier();
superInterfaces.add(superInt);
        }
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      // There should be an interface body
               // Here, there's a call of the method interfaceBody()
               interfaceb = interfaceBody();
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JInterfaceDeclaration(line, mods, name, superInterfaces, interfaceb);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JMember> classBody() throws ParseException {ArrayList<String> mods = null;
    JMember aMember        = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
    try {
      jj_consume_token(LCURLY);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOID:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        mods = modifiers();
        aMember = memberDecl(mods);
members.add(aMember);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JMember> interfaceBody() throws ParseException {// same variables with the classBody() method
    ArrayList<String> mods = null;
    JMember aMember        = null;
    ArrayList<JMember> members = new ArrayList<JMember>();
    try {
      jj_consume_token(LCURLY);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case VOID:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        mods = modifiers();
if (!mods.contains(ABSTRACT)) {
                  mods.add(String.valueOf("abstract"));
              }
        aMember = interfaceMemberDecl(mods);
members.add(aMember);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return members;}
    throw new Error("Missing return statement in function");
}

  final private JMember memberDecl(ArrayList<String> mods) throws ParseException {int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    JBlock body = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember memberDecl = null;
    // I added the list exceptions
    ArrayList<TypeName> exceptions = null;
    TypeName exception = null;
    try {
      if (jj_2_3(2147483647)) {
        jj_consume_token(IDENTIFIER);
line = token.beginLine;
                name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THROWS:{
          jj_consume_token(THROWS);
          exception = qualifiedIdentifier();
// creating the new array here
                    exceptions= new ArrayList<TypeName>();
                    exceptions.add(exception);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_9;
            }
            jj_consume_token(COMMA);
            exception = qualifiedIdentifier();
exceptions.add(exception);
          }
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        body = block();
memberDecl = new JConstructorDeclaration(line, mods, name, params, exceptions, body);
      } else if (jj_2_4(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:{
          jj_consume_token(VOID);
type = Type.VOID;
          break;
          }
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case IDENTIFIER:{
          type = type();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
line = token.beginLine;
        jj_consume_token(IDENTIFIER);
name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THROWS:{
          jj_consume_token(THROWS);
          exception = qualifiedIdentifier();
exceptions = new ArrayList<TypeName>();
                exceptions.add(exception);
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              break label_10;
            }
            jj_consume_token(COMMA);
            exception = qualifiedIdentifier();
exceptions.add(exception);
          }
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LCURLY:{
          body = block();
          break;
          }
        case SEMI:{
          jj_consume_token(SEMI);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
memberDecl = new JMethodDeclaration(line, mods, name, type, params, exceptions, body);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case IDENTIFIER:{
          type = type();
line = token.beginLine;
          variableDeclarators = variableDeclarators(type);
memberDecl = new JFieldDeclaration(line, mods, variableDeclarators);
          jj_consume_token(SEMI);
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return memberDecl;}
    throw new Error("Missing return statement in function");
}

  final private JMember interfaceMemberDecl(ArrayList<String> mods) throws ParseException {int line = 0;
    Type type = null;
    String name = "";
    ArrayList<JFormalParameter> params = null;
    ArrayList<JVariableDeclarator> variableDeclarators = null;
    JMember interfaceMemberDecl = null;
    // I added a list that will contain qualified identifiers
    ArrayList<TypeName> exceptions = null;
    TypeName exception = null;
    try {
      if (jj_2_5(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:{
          jj_consume_token(VOID);
type = Type.VOID;
          break;
          }
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case IDENTIFIER:{
          type = type();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
line = token.beginLine;
        jj_consume_token(IDENTIFIER);
name = token.image;
        params = formalParameters();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THROWS:{
          jj_consume_token(THROWS);
          exception = qualifiedIdentifier();
exceptions = new ArrayList<TypeName>();
                exceptions.add(exception);
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[21] = jj_gen;
              break label_11;
            }
            jj_consume_token(COMMA);
            exception = qualifiedIdentifier();
exceptions.add(exception);
          }
          break;
          }
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
interfaceMemberDecl = new JMethodDeclaration(line, mods, name, type, params, exceptions, null);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:
        case IDENTIFIER:{
          type = type();
line = token.beginLine;
          variableDeclarators = variableDeclarators(type);
          jj_consume_token(SEMI);
interfaceMemberDecl = new JFieldDeclaration(line, mods, variableDeclarators);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return interfaceMemberDecl;}
    throw new Error("Missing return statement in function");
}

  final private JBlock block() throws ParseException {int line = 0;
    JStatement aStatement = null;
    ArrayList<JStatement> statements = new ArrayList<JStatement>();
    try {
      jj_consume_token(LCURLY);
line = token.beginLine;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case SWITCH:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case WHILE:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        aStatement = blockStatement();
statements.add(aStatement);
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JBlock(line, statements);}
    throw new Error("Missing return statement in function");
}

  final private JStatement blockStatement() throws ParseException {JStatement statement = null;
    try {
      if (jj_2_6(2147483647)) {
        statement = localVariableDeclarationStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BREAK:
        case CONTINUE:
        case DO:
        case FALSE:
        case FOR:
        case IF:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case SWITCH:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case WHILE:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          statement = statement();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
}

  final private JStatement statement() throws ParseException {int line = 0;
    JStatement statement  = null;
    JExpression test      = null;
    JStatement consequent = null;
    JStatement alternate  = null;
    JStatement body       = null;
    JExpression expr      = null;
    // I have added the following lines recently
    // the tryBlock is needed for the exception handlers
    JBlock tryBlock = null;
    // the finallyBlock is needed for the exception handlers
    JBlock finallyBlock = null;
    JFormalParameter param = null;
    // the catchBlock is needed for the exception handlers
    JBlock catchBlock = null;
    ArrayList<JFormalParameter> params = new ArrayList<JFormalParameter>();
    // The catchBlocks is needed for the exception handlers
    ArrayList<JBlock> catchBlocks = new ArrayList<JBlock>();
    // The init list is needed for the FOR statement
    ArrayList<JStatement> init = null;
    // The update list is needed for the FOR statement
    ArrayList<JStatement> update = null;
    // The stmtGroup list is needed for the SWITCH statement
    ArrayList<SwitchStatementGroup> stmtGroup = new ArrayList<SwitchStatementGroup>();
    // The switchgroup is needed for the SWITCH statement
    SwitchStatementGroup switchgroup = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLY:{
        statement = block();
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
line = token.beginLine;
        jj_consume_token(SEMI);
statement = new JBreakStatement(line);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
line = token.beginLine;
        jj_consume_token(SEMI);
statement = new JContinueStatement(line);
        break;
        }
      case DO:{
        jj_consume_token(DO);
line = token.beginLine;
        // after the reserved word DO we get the body
                body = statement();
        jj_consume_token(WHILE);
        // WHILE must be followed by a parenthesized expression
                test = parExpression();
        jj_consume_token(SEMI);
statement = new JDoStatement(line, body, test);
        break;
        }
      case FOR:{
        jj_consume_token(FOR);
line = token.beginLine;
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          init = forInit();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          expr = expression();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          update = forUpdate();
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        // Lastly, there should be statement
                statement = statement();
statement = new JForStatement(line, init, expr, update, statement);
        break;
        }
      case IF:{
        jj_consume_token(IF);
line = token.beginLine;
        test = parExpression();
        consequent = statement();
        if (jj_2_7(2147483647)) {
          jj_consume_token(ELSE);
          alternate = statement();
        } else {
          ;
        }
statement = new JIfStatement(line, test, consequent, alternate);
        break;
        }
      case RETURN:{
        jj_consume_token(RETURN);
line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case LPAREN:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          expr = expression();
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(SEMI);
statement = new JReturnStatement(line, expr);
        break;
        }
      case SEMI:{
        jj_consume_token(SEMI);
line = token.beginLine;
            statement = new JEmptyStatement( line );
        break;
        }
      case SWITCH:{
        jj_consume_token(SWITCH);
line = token.beginLine;
        // after the reserved word SWITCH, we have a parenthesized expression
                test = parExpression();
        jj_consume_token(LCURLY);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CASE:
          case DEFAULT1:{
            ;
            break;
            }
          default:
            jj_la1[30] = jj_gen;
            break label_13;
          }
          switchgroup = switchBlockStatementGroup();
stmtGroup.add(switchgroup);
        }
        jj_consume_token(RCURLY);
statement = new JSwitchStatement(line, test, stmtGroup);
        break;
        }
      case THROW:{
        jj_consume_token(THROW);
line = token.beginLine;
        // The THROW is followed by ab expression which is followed by a SEMI
                expr = expression();
        jj_consume_token(SEMI);
statement = new JThrowStatement(line, expr);
        break;
        }
      case TRY:{
        jj_consume_token(TRY);
line = token.beginLine;
        // TRY is followed by a block which I named tryBlock
                tryBlock = block();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CATCH:{
            ;
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            break label_14;
          }
          jj_consume_token(CATCH);
          jj_consume_token(LPAREN);
          param = formalParameter();
params.add(param);
          jj_consume_token(RPAREN);
          catchBlock = block();
catchBlocks.add(catchBlock);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FINALLY:{
          jj_consume_token(FINALLY);
          finallyBlock = block();
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
statement = new JTryStatement(line, tryBlock, params, catchBlocks, finallyBlock);
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
line = token.beginLine;
        test = parExpression();
        body = statement();
statement = new JWhileStatement(line, test, body);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case BNOT:
      case PLUS:
      case INC:
      case MINUS:
      case DEC:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        // Must be a statementExpression.
                statement = statementExpression();
        jj_consume_token(SEMI);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statement;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JFormalParameter> formalParameters() throws ParseException {ArrayList<JFormalParameter> parameters = new ArrayList<JFormalParameter>();
    JFormalParameter aParameter = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case INT:
      case LONG:
      case IDENTIFIER:{
        aParameter = formalParameter();
parameters.add(aParameter);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          aParameter = formalParameter();
parameters.add(aParameter);
        }
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return parameters;}
    throw new Error("Missing return statement in function");
}

  final private JFormalParameter formalParameter() throws ParseException {int line    = 0;
    Type type   = null;
    String name = "";
    try {
      type = type();
line = token.beginLine;
      jj_consume_token(IDENTIFIER);
name = token.image;
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JFormalParameter(line, name, type);}
    throw new Error("Missing return statement in function");
}

  final private JExpression parExpression() throws ParseException {JExpression expr = null;
    try {
      jj_consume_token(LPAREN);
      expr = expression();
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JStatement> forInit() throws ParseException {// Here are the variables needed for the forInit() method
    // and list that will hold the statement expressions or the
    // the single variable declarator
    ArrayList<JStatement> statements = new ArrayList<JStatement>();
    // needed to get the variable declarator
    ArrayList<JVariableDeclarator> vdecls = null;
    JStatement statement = null;
    int line = 0;
    Type type = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case BNOT:
      case PLUS:
      case INC:
      case MINUS:
      case DEC:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        // add 1 or more statement expressions in the statements list
                statement = statementExpression();
statements.add(statement);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            break label_16;
          }
          jj_consume_token(COMMA);
          statement = statementExpression();
statements.add(statement);
        }
        break;
        }
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case INT:
      case LONG:{
line = token.beginLine;
        type = type();
vdecls = variableDeclarators(type);
statements.add(new JVariableDeclaration(line, vdecls));
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JStatement> forUpdate() throws ParseException {// These are the variables needed for the forUpdate() method
    // This is the list that will contain all the necessary statements
    ArrayList<JStatement> statements = new ArrayList<JStatement>();
    JStatement statement = null;
    try {
      // add in the statements list 1 or more statement expressions
              statement = statementExpression();
statements.add(statement);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return statements;}
    throw new Error("Missing return statement in function");
}

  final private SwitchStatementGroup switchBlockStatementGroup() throws ParseException {// I added to this block the variables that are needed for the
    // switchBlockStatementGroup
    // I need a labels list
    ArrayList<JExpression> labels = new ArrayList<JExpression>();
    // I need a statement blocks list
    ArrayList<JStatement> stmtBlock = new ArrayList<JStatement>();
    JExpression label = null;
    JStatement stmblock = null;
    try {
      // I am adding 1 or more labels in the labels list
              label = switchLabel();
labels.add(label);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case DEFAULT1:{
          ;
          break;
          }
        default:
          jj_la1[38] = jj_gen;
          break label_17;
        }
        label = switchLabel();
labels.add(label);
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SUPER:
        case SWITCH:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case WHILE:
        case LCURLY:
        case LPAREN:
        case SEMI:
        case LNOT:
        case BNOT:
        case PLUS:
        case INC:
        case MINUS:
        case DEC:
        case IDENTIFIER:
        case INT_LITERAL:
        case LONG_LITERAL:
        case DOUBLE_LITERAL:
        case CHAR_LITERAL:
        case STRING_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        stmblock = blockStatement();
stmtBlock.add(stmblock);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new SwitchStatementGroup(labels, stmtBlock);}
    throw new Error("Missing return statement in function");
}

  final private JExpression switchLabel() throws ParseException {JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        jj_consume_token(CASE);
        expr = expression();
        jj_consume_token(COLON);
        break;
        }
      case DEFAULT1:{
        jj_consume_token(DEFAULT1);
        jj_consume_token(COLON);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JVariableDeclaration localVariableDeclarationStatement() throws ParseException {int line = 0;
    Type type = null;
    ArrayList<JVariableDeclarator> vdecls = null;
    try {
      type = type();
line = token.beginLine;
      vdecls = variableDeclarators(type);
      jj_consume_token(SEMI);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JVariableDeclaration(line, vdecls);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JVariableDeclarator> variableDeclarators(Type type) throws ParseException {JVariableDeclarator aVariableDeclarator = null;
    ArrayList<JVariableDeclarator> variableDeclarators = new ArrayList<JVariableDeclarator>();
    try {
      aVariableDeclarator = variableDeclarator(type);
variableDeclarators.add(aVariableDeclarator);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        aVariableDeclarator = variableDeclarator(type);
variableDeclarators.add(aVariableDeclarator);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return variableDeclarators;}
    throw new Error("Missing return statement in function");
}

  final private JVariableDeclarator variableDeclarator(Type type) throws ParseException {int line = 0;
    JExpression initial = null;
    String name = "";
    try {
      jj_consume_token(IDENTIFIER);
line = token.beginLine;
            name = token.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        initial = variableInitializer(type);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JVariableDeclarator(line, name, type, initial);}
    throw new Error("Missing return statement in function");
}

  final private JExpression variableInitializer(Type type) throws ParseException {JExpression initializer = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLY:{
        initializer = arrayInitializer(type);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case BNOT:
      case PLUS:
      case INC:
      case MINUS:
      case DEC:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        initializer = expression();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return initializer;}
    throw new Error("Missing return statement in function");
}

  final private JArrayInitializer arrayInitializer(Type type) throws ParseException {int line = 0;
    ArrayList<JExpression> initials = new ArrayList<JExpression>();
    JExpression anInitializer = null;
    try {
      jj_consume_token(LCURLY);
line = token.beginLine;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LCURLY:
      case LPAREN:
      case LNOT:
      case BNOT:
      case PLUS:
      case INC:
      case MINUS:
      case DEC:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        anInitializer = variableInitializer(type.componentType());
initials.add(anInitializer);
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[44] = jj_gen;
            break label_20;
          }
          jj_consume_token(COMMA);
          anInitializer = variableInitializer(type.componentType());
initials.add(anInitializer);
        }
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(RCURLY);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JArrayInitializer(line, type, initials);}
    throw new Error("Missing return statement in function");
}

  final private ArrayList<JExpression> arguments() throws ParseException {ArrayList<JExpression> args = new ArrayList<JExpression>();
    JExpression anExpression = null;
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case BNOT:
      case PLUS:
      case INC:
      case MINUS:
      case DEC:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        anExpression = expression();
args.add(anExpression);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          anExpression = expression();
args.add(anExpression);
        }
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
}

  final private Type type() throws ParseException {Type type = null;
    try {
      if (jj_2_8(2147483647)) {
        type = referenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case DOUBLE:
        case INT:
        case LONG:{
          type = basicType();
          break;
          }
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private Type basicType() throws ParseException {Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
type = Type.BOOLEAN;
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
type = Type.CHAR;
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
type = Type.DOUBLE;
        break;
        }
      case INT:{
        jj_consume_token(INT);
type = Type.INT;
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
type = Type.LONG;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
if (type == Type.ANY) {
            reportParserError("Type sought where %s found", token.image);
        }
        {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private Type referenceType() throws ParseException {Type type = Type.ANY;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case INT:
      case LONG:{
        type = basicType();
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            ;
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            break label_22;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        }
        break;
        }
      case IDENTIFIER:{
        type = qualifiedIdentifier();
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            ;
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_23;
          }
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final private JStatement statementExpression() throws ParseException {int line = 0;
    JExpression expr = null;
    try {
      expr = expression();
line = expr.line();
            if (expr instanceof JAssignment
             || expr instanceof JPreIncrementOp
             || expr instanceof JPostDecrementOp
             || expr instanceof JMessageExpression
             || expr instanceof JSuperConstruction
             || expr instanceof JThisConstruction
             || expr instanceof JNewOp
             || expr instanceof JNewArrayOp
             // added this line for the For loop
             || expr instanceof JStatement) {
                // So as not to save on stack.
                expr.isStatementExpression = true;
            } else {
                reportParserError("Invalid statement expression; it does not have a side-effect");
            }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JStatementExpression( line, expr );}
    throw new Error("Missing return statement in function");
}

  final private JExpression expression() throws ParseException {JExpression expr = null;
    try {
      expr = assignmentExpression();
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression assignmentExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = conditionalExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:
      case DIV_ASSIGN:
      case PLUS_ASSIGN:
      case MINUS_ASSIGN:
      case STAR_ASSIGN:
      case REM_ASSIGN:
      case ARSHIFT_ASSIGN:
      case LRSHIFT_ASSIGN:
      case ALSHIFT_ASSIGN:
      case BXOR_ASSIGN:
      case BOR_ASSIGN:
      case BAND_ASSIGN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALSHIFT_ASSIGN:{
          jj_consume_token(ALSHIFT_ASSIGN);
          rhs = assignmentExpression();
lhs = new JALeftShiftAssignOp(line, lhs, rhs);
          break;
          }
        case BAND_ASSIGN:{
          jj_consume_token(BAND_ASSIGN);
          rhs = assignmentExpression();
lhs = new JAndAssignOp(line, lhs, rhs);
          break;
          }
        case ARSHIFT_ASSIGN:{
          jj_consume_token(ARSHIFT_ASSIGN);
          rhs = assignmentExpression();
lhs = new JARightShiftAssignOp(line, lhs, rhs);
          break;
          }
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          rhs = assignmentExpression();
lhs = new JAssignOp(line, lhs, rhs);
          break;
          }
        case DIV_ASSIGN:{
          jj_consume_token(DIV_ASSIGN);
          rhs = assignmentExpression();
lhs = new JDivAssignOp(line, lhs, rhs);
          break;
          }
        case LRSHIFT_ASSIGN:{
          jj_consume_token(LRSHIFT_ASSIGN);
          rhs = assignmentExpression();
lhs = new JLRightShiftAssignOp(line, lhs, rhs);
          break;
          }
        case MINUS_ASSIGN:{
          jj_consume_token(MINUS_ASSIGN);
          rhs = assignmentExpression();
lhs = new JMinusAssignOp(line, lhs, rhs);
          break;
          }
        case BOR_ASSIGN:{
          jj_consume_token(BOR_ASSIGN);
          rhs = assignmentExpression();
lhs = new JOrAssignOp(line, lhs, rhs);
          break;
          }
        case PLUS_ASSIGN:{
          jj_consume_token(PLUS_ASSIGN);
          rhs = assignmentExpression();
lhs = new JPlusAssignOp(line, lhs, rhs);
          break;
          }
        case REM_ASSIGN:{
          jj_consume_token(REM_ASSIGN);
          rhs = assignmentExpression();
lhs = new JRemAssignOp(line, lhs, rhs);
          break;
          }
        case STAR_ASSIGN:{
          jj_consume_token(STAR_ASSIGN);
          rhs = assignmentExpression();
lhs = new JStarAssignOp(line, lhs, rhs);
          break;
          }
        case BXOR_ASSIGN:{
          jj_consume_token(BXOR_ASSIGN);
          rhs = assignmentExpression();
lhs = new JXorAssignOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalExpression() throws ParseException {int line = 0;
     JExpression lhs = null, thenPart = null, elsePart = null;
    try {
      lhs = conditionalOrExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUESTION:{
        jj_consume_token(QUESTION);
        thenPart = expression();
        jj_consume_token(COLON);
        elsePart = conditionalExpression();
lhs = new JConditionalExpression(line, lhs, thenPart, elsePart);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalOrExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = conditionalAndExpression();
line = lhs.line();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LOR:{
          ;
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          break label_24;
        }
        jj_consume_token(LOR);
        rhs = conditionalAndExpression();
lhs = new JLogicalOrOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression conditionalAndExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = inclusiveOrExpression();
line = lhs.line();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LAND:{
          ;
          break;
          }
        default:
          jj_la1[57] = jj_gen;
          break label_25;
        }
        jj_consume_token(LAND);
        rhs = inclusiveOrExpression();
lhs = new JLogicalAndOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression inclusiveOrExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = exclusiveOrExpression();
line = lhs.line();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOR:{
          ;
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          break label_26;
        }
        jj_consume_token(BOR);
        rhs = exclusiveOrExpression();
lhs = new JOrOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression exclusiveOrExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = andExpression();
line = lhs.line();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BXOR:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_27;
        }
        jj_consume_token(BXOR);
        rhs = andExpression();
lhs = new JXorOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression andExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = equalityExpression();
line = lhs.line();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BAND:{
          ;
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          break label_28;
        }
        jj_consume_token(BAND);
        rhs = equalityExpression();
lhs = new JAndOp(line, lhs, rhs);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression equalityExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = relationalExpression();
line = lhs.line();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:
        case NOT_EQUAL:{
          ;
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQUAL:{
          jj_consume_token(EQUAL);
          rhs = relationalExpression();
lhs = new JEqualOp(line, lhs, rhs);
          break;
          }
        case NOT_EQUAL:{
          jj_consume_token(NOT_EQUAL);
          rhs = relationalExpression();
lhs = new JNotEqualOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression relationalExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    Type type = null;
    try {
      lhs = shiftExpression();
line = lhs.line();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTANCEOF:
      case GE:
      case GT:
      case LE:
      case LT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GE:{
          jj_consume_token(GE);
          rhs = shiftExpression();
lhs = new JGreaterEqualOp(line, lhs, rhs);
          break;
          }
        case GT:{
          jj_consume_token(GT);
          rhs = shiftExpression();
lhs = new JGreaterThanOp(line, lhs, rhs);
          break;
          }
        case LE:{
          jj_consume_token(LE);
          rhs = shiftExpression();
lhs = new JLessEqualOp(line, lhs, rhs);
          break;
          }
        case LT:{
          jj_consume_token(LT);
          rhs = shiftExpression();
lhs = new JLessThanOp(line, lhs, rhs);
          break;
          }
        case INSTANCEOF:{
          jj_consume_token(INSTANCEOF);
          type = referenceType();
lhs = new JInstanceOfOp(line, lhs, type);
          break;
          }
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        ;
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression shiftExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    Type type = null;
    try {
      lhs = additiveExpression();
line = lhs.line();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARSHIFT:
        case LRSHIFT:
        case ALSHIFT:{
          ;
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ALSHIFT:{
          jj_consume_token(ALSHIFT);
          rhs = additiveExpression();
lhs = new JALeftShiftOp(line, lhs, rhs);
          break;
          }
        case ARSHIFT:{
          jj_consume_token(ARSHIFT);
          rhs = additiveExpression();
lhs = new JARightShiftOp(line, lhs, rhs);
          break;
          }
        case LRSHIFT:{
          jj_consume_token(LRSHIFT);
          rhs = additiveExpression();
lhs = new JLRightShiftOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression additiveExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = multiplicativeExpression();
line = lhs.line();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MINUS:{
          jj_consume_token(MINUS);
          rhs = multiplicativeExpression();
lhs = new JSubtractOp(line, lhs, rhs);
          break;
          }
        case PLUS:{
          jj_consume_token(PLUS);
          rhs = multiplicativeExpression();
lhs = new JPlusOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression multiplicativeExpression() throws ParseException {int line = 0;
    JExpression lhs = null, rhs = null;
    try {
      lhs = unaryExpression();
line = lhs.line();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIV:
        case STAR:
        case REM:{
          ;
          break;
          }
        default:
          jj_la1[69] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          jj_consume_token(STAR);
          rhs = unaryExpression();
lhs = new JMultiplyOp(line, lhs, rhs);
          break;
          }
        case DIV:{
          jj_consume_token(DIV);
          rhs = unaryExpression();
lhs = new JDivideOp(line, lhs, rhs);
          break;
          }
        case REM:{
          jj_consume_token(REM);
          rhs = unaryExpression();
lhs = new JRemainderOp(line, lhs, rhs);
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return lhs;}
    throw new Error("Missing return statement in function");
}

  final private JExpression unaryExpression() throws ParseException {int line = 0;
    JExpression expr = null, unaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEC:{
        jj_consume_token(DEC);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JPreDecrementOp(line, unaryExpr);
        break;
        }
      case INC:{
        jj_consume_token(INC);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JPreIncrementOp(line, unaryExpr);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JNegateOp(line, unaryExpr);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JUnaryPlusOp(line, unaryExpr);
        break;
        }
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case LPAREN:
      case LNOT:
      case BNOT:
      case IDENTIFIER:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        expr = simpleUnaryExpression();
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression simpleUnaryExpression() throws ParseException {int line = 0;
    Type type = null;
    JExpression expr = null, unaryExpr = null, simpleUnaryExpr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LNOT:{
        jj_consume_token(LNOT);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JLogicalNotOp(line, unaryExpr);
        break;
        }
      case BNOT:{
        jj_consume_token(BNOT);
line = token.beginLine;
        unaryExpr = unaryExpression();
expr = new JComplementOp(line, unaryExpr);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        if (jj_2_9(2147483647)) {
          jj_consume_token(LPAREN);
line = token.beginLine;
          type = basicType();
          jj_consume_token(RPAREN);
          unaryExpr = unaryExpression();
expr = new JCastOp(line, type, unaryExpr);
        } else if (jj_2_10(2147483647)) {
          jj_consume_token(LPAREN);
line = token.beginLine;
          type = referenceType();
          jj_consume_token(RPAREN);
          simpleUnaryExpr = simpleUnaryExpression();
expr = new JCastOp(line, type, simpleUnaryExpr);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FALSE:
          case NEW:
          case NULL:
          case SUPER:
          case THIS:
          case TRUE:
          case LPAREN:
          case IDENTIFIER:
          case INT_LITERAL:
          case LONG_LITERAL:
          case DOUBLE_LITERAL:
          case CHAR_LITERAL:
          case STRING_LITERAL:{
            expr = postfixExpression();
            break;
            }
          default:
            jj_la1[73] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr ;}
    throw new Error("Missing return statement in function");
}

  final private JExpression postfixExpression() throws ParseException {int line = 0;
    JExpression primaryExpr = null;
    try {
      primaryExpr = primary();
line = primaryExpr.line();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:
        case LBRACK:{
          ;
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          break label_33;
        }
        primaryExpr = selector(primaryExpr);
      }
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INC:
        case DEC:{
          ;
          break;
          }
        default:
          jj_la1[75] = jj_gen;
          break label_34;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEC:{
          jj_consume_token(DEC);
primaryExpr = new JPostDecrementOp(line, primaryExpr);
          break;
          }
        case INC:{
          jj_consume_token(INC);
primaryExpr = new JPostIncrementOp(line, primaryExpr);
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return primaryExpr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression selector(JExpression target) throws ParseException {int line = 0;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
line = token.beginLine;
        id = qualifiedIdentifier();
expr = new JFieldSelection(line, ambiguousPart(id), target, id.simpleName());
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JMessageExpression(line, target, ambiguousPart(id), id.simpleName(),
                                            args);
          break;
          }
        default:
          jj_la1[77] = jj_gen;
          ;
        }
        break;
        }
      case LBRACK:{
        jj_consume_token(LBRACK);
line = token.beginLine;
expr = new JArrayExpression(line, target, expression());
        jj_consume_token(RBRACK);
        break;
        }
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression primary() throws ParseException {int line = 0;
    String name = "";
    JExpression expr = null;
    JExpression newTarget = null;
    ArrayList<JExpression> args = null;
    TypeName id = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        expr = parExpression();
        break;
        }
      case NEW:{
        jj_consume_token(NEW);
        expr = creator();
        break;
        }
      case THIS:{
        jj_consume_token(THIS);
line = token.beginLine;
            expr = new JThis(line);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JThisConstruction(line, args);
          break;
          }
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
line = token.beginLine;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JSuperConstruction(line, args);
          break;
          }
        case DOT:{
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
name = token.image;
                newTarget = new JSuper(line);
                expr = new JFieldSelection(line, newTarget, name);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LPAREN:{
            args = arguments();
expr = new JMessageExpression(line, newTarget, null, name, args);
            break;
            }
          default:
            jj_la1[80] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case IDENTIFIER:{
        // Language is ambiguous here. JavaCC is unable to choose between qualifiedIdentifier and
                // selector. Semantic analysis will sort it out.
                id = qualifiedIdentifier();
line = id.line();
            if (ambiguousPart(id) == null) {
                expr = new JVariable(line, id.simpleName());
            } else {
                expr = new JFieldSelection(line, ambiguousPart(id), null, id.simpleName());
            }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          args = arguments();
expr = new JMessageExpression(line, null, ambiguousPart(id), id.simpleName(), args);
          break;
          }
        default:
          jj_la1[82] = jj_gen;
          ;
        }
        break;
        }
      case FALSE:
      case NULL:
      case TRUE:
      case INT_LITERAL:
      case LONG_LITERAL:
      case DOUBLE_LITERAL:
      case CHAR_LITERAL:
      case STRING_LITERAL:{
        expr = literal();
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JExpression creator() throws ParseException {int line = 0;
    Type type = null;
    ArrayList<JExpression> args = null;
    ArrayList<JExpression> dims = null;
    JArrayInitializer init =  null;
    JExpression expr = null;
    Type expected = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case INT:
      case LONG:{
        type = basicType();
        break;
        }
      case IDENTIFIER:{
        type = qualifiedIdentifier();
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
line = token.beginLine;
            expected = type;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        args = arguments();
expr = new JNewOp(line, type, args);
        break;
        }
      default:
        jj_la1[86] = jj_gen;
        if (jj_2_12(2147483647)) {
          jj_consume_token(LBRACK);
          jj_consume_token(RBRACK);
expected = new ArrayTypeName(expected);
          label_35:
          while (true) {
            if (jj_2_11(2147483647)) {
              ;
            } else {
              break label_35;
            }
            jj_consume_token(LBRACK);
            jj_consume_token(RBRACK);
expected = new ArrayTypeName(expected);
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LCURLY:{
            expr = arrayInitializer(expected);
            break;
            }
          default:
            jj_la1[85] = jj_gen;
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACK:{
            expr = newArrayDeclarator(type);
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (ParseException e) {
expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final private JNewArrayOp newArrayDeclarator(Type type) throws ParseException {int line = 0;
    ArrayList<JExpression> dimensions = new ArrayList<JExpression>();
    JExpression expr = null;
    try {
      jj_consume_token(LBRACK);
line = token.beginLine;
      expr = expression();
dimensions.add(expr);
            type = new ArrayTypeName(type);
      jj_consume_token(RBRACK);
      label_36:
      while (true) {
        if (jj_2_13(2147483647)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(LBRACK);
        expr = expression();
dimensions.add(expr);
                type = new ArrayTypeName(type);
        jj_consume_token(RBRACK);
      }
      label_37:
      while (true) {
        if (jj_2_14(2147483647)) {
          ;
        } else {
          break label_37;
        }
        jj_consume_token(LBRACK);
        jj_consume_token(RBRACK);
type = new ArrayTypeName(type);
      }
    } catch (ParseException e) {
recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return new JNewArrayOp(line, type, dimensions);}
    throw new Error("Missing return statement in function");
}

  final private JExpression literal() throws ParseException {JExpression expr = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR_LITERAL:{
        jj_consume_token(CHAR_LITERAL);
expr = new JLiteralChar(token.beginLine, token.image);
        break;
        }
      case DOUBLE_LITERAL:{
        jj_consume_token(DOUBLE_LITERAL);
expr = new JLiteralDouble(token.beginLine, token.image);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
expr = new JLiteralBoolean(token.beginLine, token.image);
        break;
        }
      case INT_LITERAL:{
        jj_consume_token(INT_LITERAL);
expr = new JLiteralInt(token.beginLine, token.image);
        break;
        }
      case LONG_LITERAL:{
        jj_consume_token(LONG_LITERAL);
expr = new JLiteralLong(token.beginLine, token.image);
        break;
        }
      case NULL:{
        jj_consume_token(NULL);
expr = new JLiteralNull(token.beginLine);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
expr = new JLiteralString(token.beginLine, token.image);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
expr = new JLiteralBoolean(token.beginLine, token.image);
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
expr = new JWildExpression(token.beginLine);
        recoverFromError(new int[] { SEMI, EOF }, e);
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(50)) return false;
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(BXOR)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_148()) return false;
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_176()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_139()) return false;
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(LCURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLY)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_131()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_177()) return false;
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(BNOT)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(LNOT)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_123()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_124()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_125()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_126()) return false;
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(QUESTION)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(INC)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(DEC)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_114()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_115()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_116()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_117()) return false;
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(BXOR_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(STAR_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(REM_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(PLUS_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(BOR_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(REM)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(MINUS_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(LRSHIFT_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_119()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_120()) return false;
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(DIV_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(DOUBLE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(ARSHIFT_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(BAND_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_157()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_158()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_159()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_160()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_161()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_162()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_163()) return false;
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(ALSHIFT_ASSIGN)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_70()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_71()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_72()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_73()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_74()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_75()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_76()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_77()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_78()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_79()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_80()) return false;
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_112()) return false;
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(LRSHIFT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(ARSHIFT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_107()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_108()) return false;
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(ALSHIFT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_166()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_150()) return false;
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    xsp = jj_scanpos;
    if (!jj_3R_152()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_153()) return false;
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(LE)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_100()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_101()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_102()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_103()) return false;
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(GE)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_57()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_58()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_59()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_60()) return false;
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_54()) return false;
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(50)) return false;
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_46()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(NOT_EQUAL)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_63()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_96()) return false;
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_38()) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(SUPER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_144()) return false;
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_49()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_50()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_51()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_52()) return false;
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(THIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_scan_token(98)) return false;
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(BAND)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_132()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_133()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_134()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_135()) return false;
    jj_scanpos = xsp;
    if (!jj_3R_136()) return false;
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (!jj_3R_47()) return false;
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JavaCCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[89];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x40000000,0x41000,0x1000,0x1000,0x1000,0x1000000,0x0,0x20000000,0x0,0x1000000,0x423000,0x423000,0x0,0x0,0x422000,0x0,0x0,0x0,0x422000,0x422000,0x0,0x0,0x422000,0x1a6a6000,0x1a284000,0x2422000,0x2000000,0x2000000,0x2000000,0x108000,0x10000,0x4000000,0x1a284000,0x0,0x422000,0x0,0x2422000,0x108000,0x1a6a6000,0x108000,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x2000000,0x422000,0x422000,0x0,0x0,0x422000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x422000,0x0,0x0,0x0,0x2000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x20,0x0,0x5c2,0x5c2,0x5c0,0x5c0,0x0,0x100000,0x0,0x100000,0x0,0x405c5,0x405c5,0x100000,0x8000,0x40005,0x100000,0x8000,0x10800000,0x5,0x40005,0x100000,0x8000,0x5,0x118b7a1d,0x118b7a18,0x101281d,0x1012818,0x1012818,0x1012818,0x0,0x0,0x0,0x118b7a18,0x100000,0x5,0x100000,0x101281d,0x0,0x118b7a1d,0x0,0x100000,0x80000000,0x1812818,0x100000,0x1812818,0x100000,0x1012818,0x5,0x5,0x400000,0x400000,0x5,0x80000000,0x80000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1012818,0x0,0x1012818,0x600000,0x0,0x0,0x1000000,0x600000,0x1000000,0x1000000,0x1200000,0x1000000,0x1012818,0x5,0x800000,0x1000000,0x400000,0x10010,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb46,0xb46,0xb46,0xb46,0xb46,0xb46,0x0,0x0,0x0,0xb46,0x0,0x0,0x0,0xb46,0x0,0xb46,0x0,0x0,0x0,0xb46,0x0,0xb46,0x0,0xb46,0x0,0x0,0x0,0x0,0x0,0x288aa4a0,0x288aa4a0,0x0,0x40000000,0x0,0x10000000,0x4000000,0x80000000,0x9,0x9,0x3300000,0x3300000,0x450000,0x450000,0x240,0x240,0x5010,0x5010,0xb46,0x6,0x0,0x0,0x900,0x900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0xe64,0xe64,0xe64,0xe64,0xe64,0xe64,0x0,0x0,0x0,0xe64,0x0,0x4,0x0,0xe64,0x0,0xe64,0x0,0x0,0x0,0xe64,0x0,0xe64,0x0,0xe64,0x0,0x0,0x0,0x0,0x4,0x1,0x1,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe64,0x0,0xe64,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe64,0x4,0x0,0x0,0x0,0xe60,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JavaCCParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCCParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new JavaCCParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JavaCCParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new JavaCCParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new JavaCCParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JavaCCParser(JavaCCParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JavaCCParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 89; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[110];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 89; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 110; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 14; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
